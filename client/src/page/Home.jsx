import React, { useEffect, useState } from "react";
import { Card, FormField, Loader } from "../components";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-3 font-bold text-[#2c40b2] text-[18px]">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  const [searchText, setSearchText] = useState("");
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  function getLocal(){
    JSON.parse(localStorage.getItem("generatedImages")) || [];
  }

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch("http://localhost:8080/api/v1/post/get-posts", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getLocal();
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto px-4 py-8">
      <div className="mb-8">
        <h1 className="font-extrabold text-[#2e2e2e] text-[22px]">
          Welcome
        </h1>
        <p className="mt-2 text-[#2e2e2e] text-[18px] max-w-[700px]">
          Image Genie is an AI-powered tool that takes a text prompt, processes it, and creates an image that best matches the description given in the text prompt.
        </p>
      </div>
      <div className="mb-8">
        <h1 className="font-extrabold text-[#2e2e2e] text-[22px]">
          Community Showcase
        </h1>
        <p className="mt-2 text-[#2e2e2e] text-[18px] max-w-[700px]">
          Browse through a collection of imaginative and visually stunning images generated by Image Genie
        </p>
      </div>
      <div className="mb-5">
        <FormField
          labelName="Search Post"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>
      <div>
        {loading ? (
          <div className="flex justify-center items-center bg-[#2e2e2e] h-64">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-bold text-[#2e2e2e] text-[large] mb-2">
                Showing Results for{" "}
                <span className="text-[#3e3be0] text-[18px]">{searchText}</span>:
              </h2>
            )}
            <div className="text-[#2e2e2e] text-[18px] grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards data={allPosts} title="No Posts Yet" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;

